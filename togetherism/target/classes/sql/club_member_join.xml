<?xml version="1.0" encoding="UTF-8" ?>
 <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="club_member_joinns">

<select id="joincont" resultType="club_member_join" parameterType="String">
select * from club_member_join where member_email = #{member_email} and club_num = #{club_num}
</select>

<select id="membercont" resultType="member" parameterType="String">
select * from member where member_email = #{member_email}
</select>

<insert id="join" parameterType="club_member_join">
insert into club_member_join values(club_member_join_seq.nextval,#{member_email}, #{club_num}, #{join_hello}, #{club_host_yn}, sysdate)
</insert>

<update id="updatecount" parameterType="int">
update club set club_member_count = club_member_count + 1 where club_num = #{club_num}
</update>

<select id="clubmember" resultType="club_member_join" parameterType="int">
select * from club_member_join where club_num = #{club_num} and club_host_yn = 'N'
</select>

<select id="clubcont" resultType="club" parameterType="int">
select * from club where club_num = #{club_num}
</select>

<select id="joinedclub" resultType="club" parameterType="Map">
select * from (select rownum rnum, a.* from 
(select c.* from club c inner join club_member_join j on (c.club_num = j.club_num and j.member_email = #{sess}) 
where c.club_num in (select club_num from club_member_join where member_email = #{sess}) order by j.join_date desc) a)
where rnum &gt;= #{startRow} and rnum &lt;= #{endRow}
</select>

<select id="clublist" resultType="club" parameterType="club_member_join">
select * from club
where
club_num in
<foreach collection="list" item="item" separator="," open="(" close=")">
#{item.club_num}
</foreach>
 order by club_reg_date desc
</select>

<select id="clubhostyn" resultType="String" parameterType="club_member_join">
select club_host_yn from club_member_join where member_email = #{member_email} and club_num = #{club_num}
</select>

<delete id="leave" parameterType="club_member_join">
delete from club_member_join where member_email = #{member_email} and club_num = #{club_num} 
and club_host_yn = 'N'
</delete>

<update id="minuscount" parameterType="int">
update club set club_member_count = club_member_count - 1 where club_num = #{club_num}
</update>

<select id="myclub" resultType="club_member_join" parameterType="String">
select * from (select rownum rnum, a.* from
(select * from club_member_join where member_email = #{sess} and club_host_yn='Y' order by join_date desc) a)
where rnum between #{startRow} and #{endRow}
</select>

<update id="updatevc" parameterType="int">
update club set club_viewcount = club_viewcount + 1 where club_num = #{club_num}
</update>

<resultMap type="together.model.ClubMemberInfo" id="joinresult">
	<result property="join_hello" column="join_hello" />
	<result property="member_image" column="member_image" />
	<result property="member_nickname" column="member_nickname" />
	<result property="club_host_yn" column="club_host_yn" />
	<result property="member_email" column="member_email" />
</resultMap>

<select id="memberlist" parameterType="int" resultMap="joinresult">
select a.join_hello, b.member_image, b.member_nickname, a.club_host_yn, a.member_email   
from club_member_join a 
inner join member b 
on (a.member_email = b.member_email and a.club_num = #{club_num}) order by a.join_date
</select>

	
<select id="listcount" parameterType="Map" resultType="int">
select count(*) from club
	<where>
		<if test="keyword != null">
		<!-- 키워드가 있을땐, 복합 검색(제목, 내용, 장소 등 모든) -->
		club_host_email like '%'||#{keyword}||'%' or
		club_name like '%'||#{keyword}||'%' or
		club_region like '%'||#{keyword}||'%' or
		club_keyword like '%'||#{keyword}||'%' or
		club_info like '%'||#{keyword}||'%' or
		club_interest like '%'||#{keyword}||'%'
		</if>
		<if test="club_region != null">
		<!-- 넘어온 지역이 있을땐, 특정 지역에 대한 모임을 검색 -->
		club_region = #{club_region}
		</if>
	</where>
</select>

<select id="clublistall" parameterType="Map" resultType="club">
select * from (select a.*, rowNum rn from (
	select * from club
	<where>
		<if test="keyword != null">
		<!-- 키워드가 있을땐, 복합 검색(제목, 내용, 장소 등 모든) -->
		club_host_email like '%'||#{keyword}||'%' or
		club_name like '%'||#{keyword}||'%' or
		club_region like '%'||#{keyword}||'%' or
		club_keyword like '%'||#{keyword}||'%' or
		club_info like '%'||#{keyword}||'%' or
		club_interest like '%'||#{keyword}||'%'
		</if>
		<if test="club_region != null">
		<!-- 넘어온 지역이 있을땐, 특정 지역에 대한 모임을 검색 -->
		club_region = #{club_region}
		</if>
	</where>
	order by club_reg_date desc) a)
	where rn between #{startRow} and #{endRow}
</select>

<select id="clublistpre" parameterType="String" resultType="club">
select * from (select a.*, rowNum rn from (
	select * from club order by
	<choose>
		<when test="_parameter != null and _parameter == 'hot'">
	club_viewcount desc) a) where rn between 1 and 3
		</when>
		<when test="_parameter != null and _parameter == 'new'">
	club_reg_date desc) a) where rn between 1 and 3
		</when>
		<when test="_parameter != null and _parameter == 'pre'">
	club_member_count desc)	a) where rn between 1 and 3
		</when>
	</choose>	
</select>

<select id="joinedclubcount" resultType="int" parameterType="String">
select count(*) from club where club_num in (select club_num from club_member_join where member_email = #{sess})
</select>

<select id="myclubcount" resultType="int" parameterType="String">
select count(*) from club_member_join where member_email = #{sess} and club_host_yn='Y'
</select>
</mapper>






















